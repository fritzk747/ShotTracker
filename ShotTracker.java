import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.awt.MouseInfo;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.awt.Image;
import java.io.File;
import javax.imageio.ImageIO;
import java.awt.Graphics2D;
import java.awt.AlphaComposite;
import java.awt.RenderingHints;
import java.nio.file.Files;
import java.util.HashSet;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Iterator;
import java.lang.ProcessBuilder;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Scanner;
import java.io.InputStreamReader;
import java.io.FileInputStream;

public class ShotTracker{
	private final String imageExt = ".jpg";
	private final String programFilesPath = "C:\\Kyle\\Gambling\\DFS\\Code\\SiteParser\\ProgramFiles\\PGATour\\ShotTracker\\";
	
	//size of rectangle screen capture
	private final Rectangle rectShotTracker = new Rectangle(221,173,603,112);
	private final Rectangle rectGolferName = new Rectangle(222,61,440,44);
	private final Rectangle rectRoundNumber = new Rectangle(222,355,115,33);
	private final Rectangle rectWhichNine = new Rectangle(337,290,340,31);
	
	private int robotDelay;
	
	private int firstTabX;
	private int curPlayerX;
	private int playByPlayX;
	private int lastHoleX;
	private int secondSSX;
	private int secondNineX;
	private int closePlayerX;
	private int addressBarX;
	private int throttlingX;
	private int offlineX;
	private int firstTabY;
	private int curPlayerY;
	private int playByPlayY;
	private int lastHoleY;
	private int secondSSY;
	private int secondNineY;
	private int closePlayerY;
	private int addressBarY;
	private int throttlingY;
	private int offlineY;
	private int holeIncrement;
	
	private int numGolfers;			//this will be number of golfers to take SS's of
	private int startingGolfer;		//this is included on 4/27/16 since program is run once for golfers before ad, stopped and then run again for golfers after ad
	private int numGolfersBeforeAd;
	private int numGolfersBeforeAd2;
	private int numGolfersBeforeCut;
	private int sizeOfRow;
	private int sizeOfAd;
	private int sizeOfAd2;
	private int sizeOfCut;
	private int round;
	private int tourneyID;
	private String tourneyName;	//this will be the name of the folder where image files are stored
	
	
	public static void main(String[] args){
		ShotTracker st = new ShotTracker();
		st.run();	
	}
	
	public ShotTracker(){
		//rectShotTracker = new Rectangle(221,173,603,112);
		//rectGolferName = new Rectangle(222,61,440,44);
		
		robotDelay = 500;
		
		firstTabX = 44;
		curPlayerX = 250;
		playByPlayX = 375;
		lastHoleX = 709;
		secondSSX = 814;
		secondNineX = 813;
		closePlayerX = 1310;
		addressBarX = 283;
		throttlingX = 569;
		offlineX = 569;
		firstTabY = 13;
		curPlayerY = 80;
		playByPlayY = 138;
		lastHoleY = 300;
		secondSSY = 280;
		secondNineY = 309;
		closePlayerY = 143;
		addressBarY = 43;
		throttlingY = 468;
		offlineY = 542;
		holeIncrement = 40;
		
		numGolfers = 144;
		startingGolfer = 1;
		numGolfersBeforeAd = 5;
		numGolfersBeforeAd2 = 15;
		numGolfersBeforeCut = 200;
		sizeOfRow = 57;
		//sizeOfAd = 91;	//think it should really be 90, not 91
		//sizeOfAd = 90;
		sizeOfAd = 88;
		//sizeOfAd2 = 90;
		sizeOfAd2 = 88;
		//sizeOfAd = 400;
		//sizeOfAd = 406;
		//sizeOfAd = 293;
		sizeOfCut = 40;
		round = 1;	//obsolete
		tourneyID = 19;
		tourneyName = "SafewayOpen";
		//tourneyName = "test";
	}
	
	public void run(){
		System.out.println("run");
		
		HashSet<String> unprocessedImages = new HashSet<String>();
		String imagesFolder = "C:\\Kyle\\Gambling\\DFS\\Code\\SiteParser\\DownloadedPages\\PGATour\\ShotTracker\\2016_to_2017\\" + tourneyName + "\\";
		String batFile;
		String copyFile;
		Iterator itr;
		
		//give myself 10 seconds to minimize aws
		try{
			//Thread.sleep(10000);
		}catch(Exception e){
			System.out.println(e);
		}
		
		//String imagesFolder = "C:\\Kyle\\temp\\";
		getPlayByPlayData(imagesFolder);
		//getMousePosition();
		//getScreenRes();
		//testScreenCapture(4);
		//resizeWithGimp("C:\\Kyle\\Gambling\\DFS\\Code\\SiteParser\\DownloadedPages\\PGATour\\ShotTracker\\2015_to_2016\\ValeroOpen\\");
		//openTabs(3,0);
		
// 		createFolders(imagesFolder);
// 		deleteFolderContents(imagesFolder);		//note this deletes all text files generated by Tesseract (which may not be desireable)
// 		try{
// 			Thread.sleep(4000);
// 		}catch(Exception e){
// 			System.out.println(e);
// 		}
// 		unprocessedImages = getUnprocessedGimp(imagesFolder);
// 		//createCopyBats(imagesFolder,unprocessedImages);
// 		createCopyCommands(imagesFolder, unprocessedImages);
// 		try{
// 			//Thread.sleep(4000);
// 		}catch(Exception e){
// 			System.out.println(e);
// 		}
// 		//copy images from main tourney folder into respective gimp subdirectories
// 		//batFile = "copyOrig.bat";
// 		//executeCopyBat(batFile);
// 		copyFile = "copyOrig.txt";
// 		executeCopyCommands(copyFile);
// 		try{
// 			//Thread.sleep(4000);
// 		}catch(Exception e){
// 			System.out.println(e);
// 		}
// 		resizeWithGimp(imagesFolder);
// 		//copy images from gimp subdirectory to gimp directory
// 		//batFile = "copyNew.bat";
// 		//executeCopyBat(batFile);
// 		copyFile = "copyNew.txt";
// 		executeCopyCommands(copyFile);
// 		try{
// 			//Thread.sleep(4000);
// 		}catch(Exception e){
// 			System.out.println(e);
// 		}
// 		unprocessedImages = getUnprocessedTesseract(imagesFolder);
// 		executeTesseractCommands(imagesFolder,unprocessedImages);
// 		try{
// 			Thread.sleep(4000);
// 		}catch(Exception e){
// 			System.out.println(e);
// 		}
// 		createMasterTesseractFile(imagesFolder);
// 		testTesseract(imagesFolder);
		
		
	}
	
	public void openTabs(int numTabs, int waitTime){
		Robot robot;
		int robotDelay = 200;
		RobotHelper rh;
		String textToType;
		String curLetter;
		
		try{
			robot = new Robot();
			robot.setAutoWaitForIdle(true);
			robot.setAutoDelay(300);
			rh = new RobotHelper();
			
			//move mouse to first tab
			robot.mouseMove(firstTabX,firstTabY);
			robot.delay(robotDelay);
			//activate browser
			robot.mousePress(InputEvent.BUTTON1_MASK);
	        robot.mouseRelease(InputEvent.BUTTON1_MASK);
	        robot.delay(robotDelay);
	        
	        for(int i = 0; i < numTabs; i++){
		        //create new tab
		        robot.keyPress(KeyEvent.VK_CONTROL);
		        robot.delay(robotDelay);
		        robot.keyPress(KeyEvent.VK_T);
		        robot.delay(robotDelay);
		        robot.keyRelease(KeyEvent.VK_T);
		        robot.delay(robotDelay);
		        robot.keyRelease(KeyEvent.VK_CONTROL);
		        robot.delay(robotDelay);
		        
		        //wait for tab to open
		        Thread.sleep(5000);
		       	
		        textToType = "pgatour.com/leaderboard";
		        for(int j = 0; j < textToType.length(); j++){
			    	curLetter = textToType.substring(j,j+1).toLowerCase();
			    	rh.pressAndReleaseKey(curLetter);   
			    	robot.delay(robotDelay);
		        }
		        //press enter to go to pgatour.com/leaderboard
		        robot.keyPress(KeyEvent.VK_ENTER);
		        robot.delay(robotDelay);
		        robot.keyRelease(KeyEvent.VK_ENTER);
		        robot.delay(robotDelay);
		        
		        //wait for page to load
		        Thread.sleep(30000);
		        
		        //open up dev tools
		        robot.keyPress(KeyEvent.VK_CONTROL);
		        robot.delay(robotDelay);
		        robot.keyPress(KeyEvent.VK_SHIFT);
		        robot.delay(robotDelay);
		        robot.keyPress(KeyEvent.VK_I);
		        robot.delay(robotDelay);
		        robot.keyRelease(KeyEvent.VK_I);
		        robot.delay(robotDelay);
		        robot.keyRelease(KeyEvent.VK_SHIFT);
		        robot.delay(robotDelay);
		        robot.keyRelease(KeyEvent.VK_CONTROL);
		        robot.delay(robotDelay);
		        
		        //wait for dev tools to open
		        Thread.sleep(5000);
		        
		        //move mouse to throttling and select offline
		        robot.mouseMove(throttlingX,throttlingY);
				robot.delay(robotDelay);
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
		        robot.delay(robotDelay);
		        robot.mouseMove(offlineX,offlineY);
				robot.delay(robotDelay);
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
		        robot.delay(robotDelay);
		        
		        //wait an additional amount of time specified by method variable
		        Thread.sleep(waitTime);
	        }
        }catch(Exception e){
	        e.printStackTrace();
        }
	}
	
	public void createMasterTesseractFile(String folderPath){
		System.out.println("createMasterTesseractFile");
		
		final String masterFileName = "MasterTesseract.txt";
		final String testFileName = "TestTesseract.txt";
		
		String content;
		BufferedWriter bw;
		File folder;
		File[] listOfFiles;
		File file;
		
		folder = new File(folderPath + "Tesseract");
		try{
			bw = new BufferedWriter(new FileWriter(folder.getAbsolutePath() + "\\" + masterFileName));
			
			listOfFiles = folder.listFiles();
			for(int i = 0; i < listOfFiles.length; i++){
				file = new File(listOfFiles[i].getAbsolutePath());
				if(file.isFile() && !file.getName().equals(masterFileName) && !file.getName().equals(testFileName)){
					content = new Scanner(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), "UTF8")).useDelimiter("\\Z").next();
					bw.write(content);
					bw.newLine();
				}
			}
			
			bw.close();		
		}catch(Exception e){
			System.out.println(e);
		}
	}
	
	public void testTesseract(String folderPath){
		System.out.println("testTesseractFile");
		
		final String masterFileName = "MasterTesseract.txt";
		final String testFileName = "TestTesseract.txt";
		
		String content;
		BufferedWriter bw;
		File folder;
		File[] listOfFiles;
		File file;
		String fileName;
		
		HashSet<String> badName = new HashSet<String>();
		HashSet<String> badRound = new HashSet<String>();
		HashSet<String> badNine = new HashSet<String>();
		HashSet<String> badST = new HashSet<String>();
		HashSet<String> goodName = new HashSet<String>();
		HashSet<String> goodRound = new HashSet<String>();
		HashSet<String> goodNine = new HashSet<String>();
		HashSet<String> goodST = new HashSet<String>();
		Iterator itr;
		
		folder = new File(folderPath + "Tesseract");
		try{
			bw = new BufferedWriter(new FileWriter(folder.getAbsolutePath() + "\\" + testFileName));
			
			listOfFiles = folder.listFiles();
			for(int i = 0; i < listOfFiles.length; i++){
				file = new File(listOfFiles[i].getAbsolutePath());
				fileName = file.getName();
				if(file.isFile() && !fileName.equals(masterFileName) && !fileName.equals(testFileName)){
					content = new Scanner(new InputStreamReader(new FileInputStream(file.getAbsolutePath()), "UTF8")).useDelimiter("\\Z").next();
					
					if(fileName.contains("Name")){
						
					}else if(fileName.contains("Round")){
						//Round 1
						if(((content.contains("1") || content.contains("l")) || content.contains("l")) && !content.contains("2") && !content.contains("3") && !content.contains("4")){
							goodRound.add(fileName);
						//Round 2	
						}else if(!(content.contains("1") || content.contains("l")) && content.contains("2") && !content.contains("3") && !content.contains("4")){
							goodRound.add(fileName);
						//Round 3	
						}else if(!(content.contains("1") || content.contains("l")) && !content.contains("2") && content.contains("3") && !content.contains("4")){
							goodRound.add(fileName);
						//Round 4
						}else if(!(content.contains("1") || content.contains("l")) && !content.contains("2") && !content.contains("3") && content.contains("4")){
							goodRound.add(fileName);
						//bad round	
						}else{
							badRound.add(fileName);
						}
						
					}else if(fileName.contains("_S9.txt") || fileName.contains("_F9.txt")){
						if(content.contains("2 3 4 5 6 7 8 9")){
							goodNine.add(fileName);
						}else if(content.contains("10 11 12 13 14 15 16 17 18") || content.contains("1O 11 12 13 14 15 16 17 18")){
							goodNine.add(fileName);
						}else{
							badNine.add(fileName);
							System.out.println(content);
						}
						
					}else if(fileName.contains("_SS1.txt") || fileName.contains("_SS2.txt")){
						
					}
				}
			}
			
			itr = goodName.iterator();
			System.out.println("Good Name:");
			while(itr.hasNext()){
				System.out.println(itr.next());
			}
			System.out.println("");
			
			itr = badName.iterator();
			System.out.println("Bad Name:");
			while(itr.hasNext()){
				System.out.println(itr.next());
			}
			System.out.println("");
			
			itr = goodRound.iterator();
			System.out.println("Good Round:");
			while(itr.hasNext()){
				System.out.println(itr.next());
			}
			System.out.println("");
			
			itr = badRound.iterator();
			System.out.println("Bad Round:");
			while(itr.hasNext()){
				System.out.println(itr.next());
			}
			System.out.println("");
			
			itr = goodNine.iterator();
			System.out.println("Good Nine:");
			bw.write("Good Nine:");
			bw.newLine();
			while(itr.hasNext()){
				fileName = (String)itr.next();
				//System.out.println(fileName);
				bw.write(fileName);
				bw.newLine();
			}
			System.out.println("");
			bw.newLine();
			
			itr = badNine.iterator();
			System.out.println("Bad Nine:");
			bw.write("Bad Nine:");
			bw.newLine();
			while(itr.hasNext()){
				fileName = (String)itr.next();
				System.out.println(fileName);
				bw.write(fileName);
				bw.newLine();
			}
			System.out.println("");
			bw.newLine();
			
			itr = goodST.iterator();
			System.out.println("Good ST:");
			while(itr.hasNext()){
				System.out.println(itr.next());
			}
			System.out.println("");
			
			itr = badST.iterator();
			System.out.println("Bad ST:");
			while(itr.hasNext()){
				System.out.println(itr.next());
			}
			System.out.println("");
			
			
			
			
			bw.close();		
		}catch(Exception e){
			System.out.println(e);
		}
	}
	
	
	//note this deletes all text files generated by Tesseract (which may not be desireable)
	public void deleteFolderContents(String imagesFolder){
		System.out.println("deleteFolderContents");
		
		File folder;
		String curFile;
		String command;
		
		//remove all images from gimp directory
		folder = new File(imagesFolder + "gimp\\");
		try{
			if(folder.exists()){
				command = "cmd /c del \"" + imagesFolder + "gimp\\*" + imageExt + "\"";
				//System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}	
		
		//remove all images from gimp\Name directory
		folder = new File(imagesFolder + "gimp\\Name\\");
		try{
			if(folder.exists()){
				command = "cmd /c del \"" + imagesFolder + "gimp\\Name\\*" + imageExt + "\"";
				//System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
				command = "cmd /c del \"" + imagesFolder + "gimp\\Name\\*.bat\"";
				//System.out.println(command);
				process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
		//remove all images from gimp\Round directory
		folder = new File(imagesFolder + "gimp\\Round\\");
		try{
			if(folder.exists()){
				command = "cmd /c del \"" + imagesFolder + "gimp\\Round\\*" + imageExt + "\"";
				//System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
				command = "cmd /c del \"" + imagesFolder + "gimp\\Round\\*.bat\"";
				//System.out.println(command);
				process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
		//remove all images from gimp\Nine directory
		folder = new File(imagesFolder + "gimp\\Nine\\");
		try{
			if(folder.exists()){
				command = "cmd /c del \"" + imagesFolder + "gimp\\Nine\\*" + imageExt + "\"";
				//System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
				command = "cmd /c del \"" + imagesFolder + "gimp\\Nine\\*.bat\"";
				//System.out.println(command);
				process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
		//remove all images from gimp\ST directory
		folder = new File(imagesFolder + "gimp\\ST\\");
		try{
			if(folder.exists()){
				command = "cmd /c del \"" + imagesFolder + "gimp\\ST\\*" + imageExt + "\"";
				//System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
				command = "cmd /c del \"" + imagesFolder + "gimp\\ST\\*.bat\"";
				//System.out.println(command);
				process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
		//remove all images from Tesseract directory
		folder = new File(imagesFolder + "Tesseract\\");
		try{
			if(folder.exists()){
				command = "cmd /c del \"" + imagesFolder + "Tesseract\\*.txt\"";
				//System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}	
	}
	
	//gave up on using bat files on 6/5/16 because during testing bat file was executing like half of the commands. Switched to just calling process object
	//for each command
	public void executeCopyBat(String batFile){
		System.out.println("executeCopyBat");
		
		Process process;
		ProcessBuilder pb;
		
		pb = new ProcessBuilder(programFilesPath + batFile);
		//pb.directory(new File(programFilesPath));
		//pb.directory(new File("C:\\Kyle\\Gambling\\DFS\\Code\\SiteParser\\DownloadedPages\\PGATour\\ShotTracker\\2015_to_2016\\" + tourneyName + "\\"));
		try{
			//pb.redirectErrorStream(true);
			Process p = pb.start();
			p.waitFor();
		}catch(Exception e){
			System.out.println(e);
		}	
	}
	
	public void createCopyCommands(String folderPath, HashSet<String> imageList){
		System.out.println("createCopyCommands");
		
		File folder;
		String curFile;
		String commandOrig;
		String commandNew;
		BufferedWriter bwOrig;
		BufferedWriter bwNew;
		Iterator itr;
	
		folder = new File(folderPath);
		try{
			bwOrig = new BufferedWriter(new FileWriter(programFilesPath + "copyOrig.txt"));
			bwNew = new BufferedWriter(new FileWriter(programFilesPath + "copyNew.txt"));
			
			itr = imageList.iterator();
			while(itr.hasNext()){
				curFile = (String) itr.next();
				commandOrig = "cmd /c copy \"" + folder.getAbsolutePath() + "\\" + curFile + "\" \"" + folder.getAbsolutePath() + "\\gimp\\";
				commandNew = "cmd /c copy \"" + folder.getAbsolutePath() + "\\gimp\\";
				if(curFile.contains("Name")){
					commandOrig = commandOrig + "Name\\";
					commandNew = commandNew + "Name\\";
				}else if(curFile.contains("Round")){
					commandOrig = commandOrig + "Round\\";
					commandNew = commandNew + "Round\\";
				}else if(curFile.contains("_S9" + imageExt) || curFile.contains("_F9" + imageExt)){
					commandOrig = commandOrig + "Nine\\";
					commandNew = commandNew + "Nine\\";
				}else if(curFile.contains("_SS1" + imageExt) || curFile.contains("_SS2" + imageExt)){
					commandOrig = commandOrig + "ST\\";
					commandNew = commandNew + "ST\\";
				}
				commandOrig = commandOrig + curFile + "\"";
				commandNew = commandNew + curFile + "\" \"" + folder.getAbsolutePath() + "\\gimp\\" + curFile + "\"";
				bwOrig.write(commandOrig);
				bwNew.write(commandNew);
				bwOrig.newLine();
				bwNew.newLine();
				//System.out.println(commandOrig);
				//System.out.println(commandNew);
				//Process process = Runtime.getRuntime().exec(commandOrig);
			}
			bwOrig.close();
			bwNew.close();
		}catch(Exception e){
			System.out.println(e);
		}
	}
	
	public void executeCopyCommands(String copyFile){
		System.out.println("executeCopyCommands");
		
		BufferedReader br;
		String curLine;
		Process process;
		
		try{
			br = new BufferedReader(new FileReader(programFilesPath + copyFile));	
			
			while((curLine = br.readLine()) != null){
				process = Runtime.getRuntime().exec(curLine);
				//System.out.println(curLine);
				process.waitFor();
			}
		}catch(Exception e){
			System.out.println(e);
		}
	}
	
	public void executeTesseractCommands(String folderPath, HashSet<String> imageList){
		System.out.println("executeTesseractCommands");
		
		File folder;
		String curFile;
		String newFile;
		String command;
		Iterator itr;
		Process process;
		
		folder = new File(folderPath);
		itr = imageList.iterator();
		while(itr.hasNext()){
			curFile = (String) itr.next();
			newFile = curFile;
			newFile = newFile.replace(imageExt,"");
			newFile = newFile + ".txt";
			command = "cmd /c tesseract \"" + folder.getAbsolutePath() + "\\gimp\\" + curFile + "\" \"" + folder.getAbsolutePath() + "\\Tesseract\\" + newFile + "\"";
			if(curFile.contains("Round")){
				command = command + " -psm 5";
			}else if(curFile.contains("_S9" + imageExt) || curFile.contains("_F9" + imageExt)){
				command = command + " -psm 6";
			}
			//System.out.println(command);
			try{
				process = Runtime.getRuntime().exec(command);
				process.waitFor();
			}catch(Exception e){
				System.out.println(e);
			}
		}		
	}
	
	public void createFolders(String folderPath){
		System.out.println("createFolders");
		
		File folder = new File(folderPath);
		//File[] listOfFiles = folder.listFiles();
		//File file;
		String curFile;
		String command;
		
		//create gimp directory if it doesn't exist yet
		folder = new File(folderPath + "gimp//");
		try{
			if(!folder.exists()){
				command = "cmd /c mkdir \"" + folderPath + "gimp";
				System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
		//create gimp sub directories if they doesn't exist yet
		folder = new File(folderPath + "gimp//Name//");
		try{
			if(!folder.exists()){
				command = "cmd /c mkdir \"" + folderPath + "gimp//Name";
				System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		folder = new File(folderPath + "gimp//Round//");
		try{
			if(!folder.exists()){
				command = "cmd /c mkdir \"" + folderPath + "gimp//Round";
				System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		folder = new File(folderPath + "gimp//Nine//");
		try{
			if(!folder.exists()){
				command = "cmd /c mkdir \"" + folderPath + "gimp//Nine";
				System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		folder = new File(folderPath + "gimp//ST//");
		try{
			if(!folder.exists()){
				command = "cmd /c mkdir \"" + folderPath + "gimp//ST";
				System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
		//create Tesseract directory if it doesn't exist yet
		folder = new File(folderPath + "Tesseract//");
		try{
			if(!folder.exists()){
				command = "cmd /c mkdir \"" + folderPath + "Tesseract";
				System.out.println(command);
				Process process = Runtime.getRuntime().exec(command);
			}
		}catch(Exception e){
			System.out.println(e);
		}
		
	}
	
	//returns a HashSet of files (images) that are in the folderPath, but not in the gimp subdirectory, ie have not been processed yet
	public HashSet<String> getUnprocessedGimp(String folderPath){
		System.out.println("getUnprocessedGimp");
		
		File folder;
		File[] listOfFiles;
		File file;
		String curFile;
		HashSet<String> originalImages = new HashSet<String>();
		HashSet<String> resizedImages = new HashSet<String>();
		HashSet<String> unprocessedImages = new HashSet<String>();
		BufferedWriter bwOrig;
		BufferedWriter bwNew;
		Iterator itr;
		
		folder = new File(folderPath);
		listOfFiles = folder.listFiles();
		for(int i = 0; i < listOfFiles.length; i++){
			file = new File(listOfFiles[i].getAbsolutePath());
			if(file.isFile()){
				originalImages.add(listOfFiles[i].getName());
			}
		}
		
		folder = new File(folderPath + "gimp");
		listOfFiles = folder.listFiles();
		for(int i = 0; i < listOfFiles.length; i++){
			file = new File(listOfFiles[i].getAbsolutePath());
			if(file.isFile()){
				resizedImages.add(listOfFiles[i].getName());
			}
		}
		
		itr = originalImages.iterator();
		while(itr.hasNext()){
			curFile = (String) itr.next();
			if(!resizedImages.contains(curFile)){
				unprocessedImages.add(curFile);
			}
		}
		
		return unprocessedImages;
		
	}
	
	//returns a HashSet of files (images) that are in the folderPath, but not in the tesseract subdirectory, ie have not been processed yet
	public HashSet<String> getUnprocessedTesseract(String folderPath){
		System.out.println("getUnprocessedTesseract");
		
		File folder;
		File[] listOfFiles;
		File file;
		String curFile;
		HashSet<String> originalImages = new HashSet<String>();
		HashSet<String> resizedImages = new HashSet<String>();
		HashSet<String> unprocessedImages = new HashSet<String>();
		BufferedWriter bwOrig;
		BufferedWriter bwNew;
		Iterator itr;
		
		folder = new File(folderPath + "gimp");
		listOfFiles = folder.listFiles();
		for(int i = 0; i < listOfFiles.length; i++){
			file = new File(listOfFiles[i].getAbsolutePath());
			if(file.isFile()){
				originalImages.add(listOfFiles[i].getName().replace(imageExt,""));
			}
		}
		
		folder = new File(folderPath + "Tesseract");
		listOfFiles = folder.listFiles();
		for(int i = 0; i < listOfFiles.length; i++){
			file = new File(listOfFiles[i].getAbsolutePath());
			if(file.isFile()){
				resizedImages.add(listOfFiles[i].getName().replace(".txt",""));
			}
		}
		
		itr = originalImages.iterator();
		while(itr.hasNext()){
			curFile = (String) itr.next();
			if(!resizedImages.contains(curFile)){
				curFile = curFile + imageExt;
				unprocessedImages.add(curFile);
			}
		}
		
		return unprocessedImages;
		
	}
	
	//gave up on using bat files on 6/5/16 because during testing bat file was executing like half of the commands. Switched to just calling process object
	//for each command
	//creates 2 .bat files
	//First bat file copies original screenshots from main tourney folder to correct gimp subfolder (name, round, nine, st)
	//Second bat file copies enlarged images from gimp subfolders to gimp folder
	public void createCopyBats(String folderPath, HashSet<String> imageList){
		System.out.println("createCopyBats");
		
		File folder;
		String curFile;
		String commandOrig;
		String commandNew;
		BufferedWriter bwOrig;
		BufferedWriter bwNew;
		Iterator itr;
		
		folder = new File(folderPath);
		try{
			bwOrig = new BufferedWriter(new FileWriter(programFilesPath + "copyOrig.bat"));
			bwNew = new BufferedWriter(new FileWriter(programFilesPath + "copyNew.bat"));
			
			itr = imageList.iterator();
			while(itr.hasNext()){
				curFile = (String) itr.next();
				commandOrig = "copy \"" + folder.getAbsolutePath() + "\\" + curFile + "\" \"" + folder.getAbsolutePath() + "\\gimp\\";
				commandNew = "copy \"" + folder.getAbsolutePath() + "\\gimp\\";
				if(curFile.contains("Name")){
					commandOrig = commandOrig + "Name\\";
					commandNew = commandNew + "Name\\";
				}else if(curFile.contains("Round")){
					commandOrig = commandOrig + "Round\\";
					commandNew = commandNew + "Round\\";
				}else if(curFile.contains("_S9" + imageExt) || curFile.contains("_F9" + imageExt)){
					commandOrig = commandOrig + "Nine\\";
					commandNew = commandNew + "Nine\\";
				}else if(curFile.contains("_SS1" + imageExt) || curFile.contains("_SS2" + imageExt)){
					commandOrig = commandOrig + "ST\\";
					commandNew = commandNew + "ST\\";
				}
				commandOrig = commandOrig + curFile + "\"";
				commandNew = commandNew + curFile + "\" \"" + folder.getAbsolutePath() + "\\gimp\\" + curFile + "\"";
				bwOrig.write(commandOrig);
				bwNew.write(commandNew);
				bwOrig.newLine();
				bwNew.newLine();
				//System.out.println(commandOrig);
				//System.out.println(commandNew);
				//Process process = Runtime.getRuntime().exec(commandOrig);
			}
			bwOrig.close();
			bwNew.close();
		}catch(Exception e){
			System.out.println(e);
		}
	}
	
	public void resizeWithGimp(String folderPath){
		System.out.println("resizeWithGimp");
		
		Process process;
		ProcessBuilder pb;
		BufferedWriter bw;
		double rectWidth;
		double rectHeight;
		
		//create 4 bat files, 1 for each type of screenshot: Name,Round,Nine,ST
		try{
			//Name
			bw = new BufferedWriter(new FileWriter(folderPath + "gimp\\Name\\gimpResizeName.bat"));
			rectWidth = rectGolferName.getWidth();
			rectHeight = rectGolferName.getHeight();
			bw.write("gimp-2.8 -i -b \"(batch-resize \\\"*.jpg\\\" " + rectWidth*3 + " " + rectHeight*3 + ")\" -b \"(gimp-quit 0)\"");
			bw.close();
			
			//Round
			bw = new BufferedWriter(new FileWriter(folderPath + "gimp\\Round\\gimpResizeRound.bat"));
			rectWidth = rectRoundNumber.getWidth();
			rectHeight = rectRoundNumber.getHeight();
			bw.write("gimp-2.8 -i -b \"(batch-resize \\\"*.jpg\\\" " + rectWidth*3 + " " + rectHeight*3 + ")\" -b \"(gimp-quit 0)\"");
			bw.close();
			
			//Nine
			bw = new BufferedWriter(new FileWriter(folderPath + "gimp\\Nine\\gimpResizeNine.bat"));
			rectWidth = rectWhichNine.getWidth();
			rectHeight = rectWhichNine.getHeight();
			bw.write("gimp-2.8 -i -b \"(batch-resize \\\"*.jpg\\\" " + rectWidth*3 + " " + rectHeight*3 + ")\" -b \"(gimp-quit 0)\"");
			bw.close();
			
			//ST
			bw = new BufferedWriter(new FileWriter(folderPath + "gimp\\ST\\gimpResizeST.bat"));
			rectWidth = rectShotTracker.getWidth();
			rectHeight = rectShotTracker.getHeight();
			bw.write("gimp-2.8 -i -b \"(batch-resize \\\"*.jpg\\\" " + rectWidth*3 + " " + rectHeight*3 + ")\" -b \"(gimp-quit 0)\"");
			bw.close();
		}catch(Exception e){
			System.out.println(e);
		}
		
		//execute 4 bat files, 1 for each type of screenshot: Name,Round,Nine,ST
		try{
			pb = new ProcessBuilder(folderPath + "gimp\\Name\\gimpResizeName.bat");
			pb.directory(new File(folderPath + "gimp\\Name\\"));
			process = pb.start();
			process.waitFor();
			
			pb = new ProcessBuilder(folderPath + "gimp\\Round\\gimpResizeRound.bat");
			pb.directory(new File(folderPath + "gimp\\Round\\"));
			process = pb.start();
			process.waitFor();
			
			pb = new ProcessBuilder(folderPath + "gimp\\Nine\\gimpResizeNine.bat");
			pb.directory(new File(folderPath + "gimp\\Nine\\"));
			process = pb.start();
			process.waitFor();
			
			pb = new ProcessBuilder(folderPath + "gimp\\ST\\gimpResizeST.bat");
			pb.directory(new File(folderPath + "gimp\\ST\\"));
			process = pb.start();
			process.waitFor();
		}catch(Exception e){
			System.out.println(e);
		}	
		
	}
	
	public void getScreenRes(){
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		double width = screenSize.getWidth();
		double height = screenSize.getHeight();
		System.out.println("Width = " + width + "\tHeight = " + height);
	}
	
	//scType = 1 for name, 2 for round, 3 for nine, 4 for hole play-by-play
	public void testScreenCapture(int scType){
		Robot robot;
		Rectangle rectangle = new Rectangle(0,0,0,0);
		BufferedImage resizedImage;
		File outputfile = new File("C:\\Kyle\\image.jpg");
		Graphics2D g;
		
		try{
			robot = new Robot();
			
			//move mouse to first tab
			robot.mouseMove(firstTabX,firstTabY);
			robot.delay(robotDelay);
			//activate browser
			robot.mousePress(InputEvent.BUTTON1_MASK);
	        robot.mouseRelease(InputEvent.BUTTON1_MASK);
	        robot.delay(robotDelay);
	        
	        if(scType == 1){
		        rectangle = rectGolferName;
	        }else if(scType == 2){
		        rectangle = rectRoundNumber;
	        }else if(scType == 3){
		        rectangle = rectWhichNine;
	        }else if(scType == 4){
		        rectangle = rectShotTracker;
	        }
	        
			BufferedImage bi = robot.createScreenCapture(rectangle);
			resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,bi.getType());
			//resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,BufferedImage.TYPE_BYTE_GRAY);
			g = resizedImage.createGraphics();
			
			g.setComposite(AlphaComposite.Src);
			//g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			//g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
			//g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
			//g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
			//g.setRenderingHint(RenderingHints.KEY_COLOR_RENDERING,RenderingHints.VALUE_COLOR_RENDER_QUALITY);
			//g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_OFF);
			//g.scale(3,3);
			
			g.drawImage(bi,0,0,bi.getWidth()*3,bi.getHeight()*3,0,0,bi.getWidth(),bi.getHeight(),null);
			g.dispose();
			
			
			
			//ImageIO.write(resizedImage, "jpg", outputfile);
			ImageIO.write(bi, "jpg", outputfile);
			
			//File createFile = new File("C:\\Kyle\\newFile.jpg");
			//createFile.createNewFile();
		}catch(Exception e){
			System.out.println(e);
		}
	}
	
	public void getMousePosition(){
		System.out.println(MouseInfo.getPointerInfo().getLocation().x);
		System.out.println(MouseInfo.getPointerInfo().getLocation().y);
	}
	
	//currently works for Chrome (quick test on Firefox revealed that mouse positioning would be different)
	//leaderboard page has to be first tab in browser, and have to be able to activate browser by clicking on first tab
	public void getPlayByPlayData(String imagesFolder){
		String jsText = "javascript:window.scrollBy(0," + sizeOfRow + ");void(0);";
		String jsTextAd = "javascript:window.scrollBy(0," + sizeOfAd + ");void(0);";
		String jsTextAd2 = "javascript:window.scrollBy(0," + sizeOfAd2 + ");void(0);";
		String jsTextCut = "javascript:window.scrollBy(0," + sizeOfCut + ");void(0);";
		String jsTextInitial = "javascript:window.scrollBy(0,500);void(0);";
		int newX = 0;
		BufferedImage bi;
		BufferedImage resizedImage;
		BufferedImage newBI;
		Image img;
		Graphics2D g;
		File outputfile;
		String filePath;
		int curGolfer = startingGolfer;
		int hole;
		long startTime;
			
		startTime = System.currentTimeMillis();
		
		
		try{
			Robot robot = new Robot();
			robot.setAutoWaitForIdle(true);
			robot.setAutoDelay(300);
			RobotHelper rh = new RobotHelper();
			
			//move mouse to first tab
			robot.mouseMove(firstTabX,firstTabY);
			robot.delay(robotDelay);
			//activate browser
			robot.mousePress(InputEvent.BUTTON1_MASK);
	        robot.mouseRelease(InputEvent.BUTTON1_MASK);
	        robot.delay(robotDelay);
	        
	        //for each golfer
	        for(int i = startingGolfer; i < numGolfers + startingGolfer; i++){
				//capute current players name
				bi = robot.createScreenCapture(rectGolferName);
				filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_Name.jpg";
				outputfile = new File(filePath);
// 				resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,bi.getType());
// 				g = resizedImage.createGraphics();
// 				g.drawImage(bi,0,0,bi.getWidth()*3,bi.getHeight()*3,0,0,bi.getWidth(),bi.getHeight(),null);
// 				g.dispose();
// 				g.setComposite(AlphaComposite.Src);
// 				g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
// 				g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
// 				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
// 				ImageIO.write(resizedImage, "png", outputfile);
				img = bi.getScaledInstance(bi.getWidth()*3,bi.getHeight()*3,Image.SCALE_DEFAULT);
				//newBI = (BufferedImage) img;
				//ImageIO.write((BufferedImage) bi.getScaledInstance(bi.getWidth()*3,bi.getHeight()*3,Image.SCALE_DEFAULT), "jpg", outputfile);
// 				ImageIO.write(bi, "png", outputfile);
				ImageIO.write(bi, "jpg", outputfile);
				
		        //move mouse to current player
		        robot.mouseMove(curPlayerX,curPlayerY);
				//robot.mouseMove(299,121);
				robot.delay(robotDelay);
				//open up shottracker view
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
		        robot.delay(robotDelay*2);
				
				//take screenshot of round number
				bi = robot.createScreenCapture(rectRoundNumber);
				filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_Round.jpg";
				outputfile = new File(filePath);
// 				resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,bi.getType());
// 				g = resizedImage.createGraphics();
// 				g.drawImage(bi,0,0,bi.getWidth()*3,bi.getHeight()*3,0,0,bi.getWidth(),bi.getHeight(),null);
// 				g.dispose();
// 				g.setComposite(AlphaComposite.Src);
// 				g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
// 				g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
// 				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
// 				ImageIO.write(resizedImage, "png", outputfile);
				//ImageIO.write((BufferedImage) bi.getScaledInstance(bi.getWidth()*3,bi.getHeight()*3,Image.SCALE_DEFAULT), "jpg", outputfile);
// 				ImageIO.write(bi, "png", outputfile);
				ImageIO.write(bi, "jpg", outputfile);
				robot.delay(robotDelay);
				
				//take screenshot of first nine player is on
				bi = robot.createScreenCapture(rectWhichNine);
				filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_F9.jpg";
				outputfile = new File(filePath);
// 				resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,bi.getType());
// 				g = resizedImage.createGraphics();
// 				g.drawImage(bi,0,0,bi.getWidth()*3,bi.getHeight()*3,0,0,bi.getWidth(),bi.getHeight(),null);
// 				g.dispose();
// 				g.setComposite(AlphaComposite.Src);
// 				g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
// 				g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
// 				g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
// 				ImageIO.write(resizedImage, "png", outputfile);
				//ImageIO.write((BufferedImage) bi.getScaledInstance(bi.getWidth()*3,bi.getHeight()*3,Image.SCALE_DEFAULT), "jpg", outputfile);
// 				ImageIO.write(bi, "png", outputfile);
				ImageIO.write(bi, "jpg", outputfile);
				robot.delay(robotDelay);
				
		        //move mouse to Play-By-Play
		        robot.mouseMove(playByPlayX,playByPlayY);
				robot.delay(robotDelay);
				//switch to Play-By-Play
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
		        robot.delay(robotDelay);
		        //move to the right of last hole
				robot.mouseMove(lastHoleX,lastHoleY);
				//for every hole on first 9
				newX = lastHoleX;
				hole = 18;
				for(int j = 0; j < 9; j++){
					newX = newX - holeIncrement;
					robot.mouseMove(newX,lastHoleY);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
					bi = robot.createScreenCapture(rectShotTracker);
					filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_F9_H" + (j+1) + "_SS1.jpg";
					//filePath = imagesFolder + "Player" + curGolfer + "_Round" + round + "_Hole" + hole + "_SS1.jpg";
					outputfile = new File(filePath);
// 					resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,bi.getType());
// 					g = resizedImage.createGraphics();
// 					g.drawImage(bi,0,0,bi.getWidth()*3,bi.getHeight()*3,0,0,bi.getWidth(),bi.getHeight(),null);
// 					g.dispose();
// 					g.setComposite(AlphaComposite.Src);
// 					g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
// 					g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);
// 					g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
// 					ImageIO.write(resizedImage, "png", outputfile);
					//ImageIO.write((BufferedImage) bi.getScaledInstance(bi.getWidth()*3,bi.getHeight()*3,Image.SCALE_DEFAULT), "jpg", outputfile);
// 					ImageIO.write(bi, "png", outputfile);
					ImageIO.write(bi, "jpg", outputfile);
					
					//move mouse and take another ss (only matters if golfer took more than 5 shots)
					robot.mouseMove(secondSSX,secondSSY);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
			        bi = robot.createScreenCapture(rectShotTracker);
					filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_F9_H" + (j+1) + "_SS2.jpg";
					//filePath = imagesFolder + "Player" + curGolfer + "_Round" + round + "_Hole" + hole + "_SS2.jpg";
					outputfile = new File(filePath);
// 					resizedImage = new BufferedImage(bi.getWidth()*3,bi.getHeight()*3,bi.getType());
// 					g = resizedImage.createGraphics();
// 					g.drawImage(bi,0,0,bi.getWidth()*3,bi.getHeight()*3,0,0,bi.getWidth(),bi.getHeight(),null);
// 					g.dispose();
// 					ImageIO.write(resizedImage, "jpg", outputfile);
					ImageIO.write(bi, "jpg", outputfile);
					
					robot.delay(robotDelay);
					
					hole--;
				}
				
				//move to second nine
				robot.mouseMove(secondNineX,secondNineY);
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
				robot.delay(robotDelay);
				
				//take screenshot of second nine player is on
				bi = robot.createScreenCapture(rectWhichNine);
				filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_S9.jpg";
				outputfile = new File(filePath);
				ImageIO.write(bi, "jpg", outputfile);
				robot.delay(robotDelay);
				
				//move to the right of last hole
				robot.mouseMove(lastHoleX,lastHoleY);
				//for every hole on second 9
				newX = lastHoleX;
				hole = 9;
				for(int j = 0; j < 9; j++){
					newX = newX - holeIncrement;
					robot.mouseMove(newX,lastHoleY);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
					bi = robot.createScreenCapture(rectShotTracker);
					filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_S9_H" + (j+1) + "_SS1.jpg";
					//filePath = imagesFolder + "Player" + curGolfer + "_Round" + round + "_Hole" + hole + "_SS1.jpg";
					outputfile = new File(filePath);
					ImageIO.write(bi, "jpg", outputfile);
					
					//move mouse and take another ss (only matters if golfer took more than 5 shots)
					robot.mouseMove(secondSSX,secondSSY);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
			        bi = robot.createScreenCapture(rectShotTracker);
					filePath = imagesFolder + startTime + "_T" + tourneyID + "_P" + curGolfer + "_S9_H" + (j+1) + "_SS2.jpg";
					//filePath = imagesFolder + "Player" + curGolfer + "_Round" + round + "_Hole" + hole + "_SS2.jpg";
					outputfile = new File(filePath);
					ImageIO.write(bi, "jpg", outputfile);
					
					robot.delay(robotDelay);
					
					hole--;
				}
				
				
				//close Shot Tracker for current player
				robot.mouseMove(closePlayerX,closePlayerY);
				robot.delay(robotDelay);
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
		        robot.delay(robotDelay);
		        
		        //scroll to next golfer
		        //move mouse to address bar
		        robot.mouseMove(addressBarX,addressBarY);
				robot.delay(robotDelay);
				robot.mousePress(InputEvent.BUTTON1_MASK);
		        robot.mouseRelease(InputEvent.BUTTON1_MASK);
		        robot.delay(robotDelay);
		        
		        //erase address bar and type in javascript command to scroll to next golfer
		        robot.keyPress(KeyEvent.VK_CONTROL);
		        robot.delay(robotDelay);
		        robot.keyPress(KeyEvent.VK_A);
		        robot.delay(robotDelay);
				robot.keyRelease(KeyEvent.VK_CONTROL);
				robot.delay(robotDelay);
				robot.keyRelease(KeyEvent.VK_A);
				robot.delay(robotDelay);
		        for(int j = 0; j < jsText.length(); j++){
			        rh.pressAndReleaseKey(jsText.substring(j,j+1));
		        }
		        
		        //wait for typing javascript
		        Thread.sleep(15000);
		        robot.keyPress(KeyEvent.VK_ENTER);
		        robot.delay(robotDelay);
				robot.keyRelease(KeyEvent.VK_ENTER);
				robot.delay(robotDelay);
				Thread.sleep(10000);
		        
		        //if this was the last golfer before ad, scroll past the ad
		        if(curGolfer == numGolfersBeforeAd){
			        //move mouse to address bar
			        robot.mouseMove(addressBarX,addressBarY);
					robot.delay(robotDelay);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
			        robot.delay(robotDelay);
			        
			        //erase address bar and type in javascript command to scroll to next golfer
			        robot.keyPress(KeyEvent.VK_CONTROL);
			        robot.delay(robotDelay);
			        robot.keyPress(KeyEvent.VK_A);
			        robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_CONTROL);
					robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_A);
					robot.delay(robotDelay);
			        for(int j = 0; j < jsText.length(); j++){
				        rh.pressAndReleaseKey(jsTextAd.substring(j,j+1));
			        }
			        
			        //wait for typing javascript
			        Thread.sleep(15000);
			        robot.keyPress(KeyEvent.VK_ENTER);
			        robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_ENTER);
					robot.delay(robotDelay);
					Thread.sleep(5000);
				}
				
				//if this was the last golfer before ad2, scroll past the ad2
		        if(curGolfer == numGolfersBeforeAd2){
			        //move mouse to address bar
			        robot.mouseMove(addressBarX,addressBarY);
					robot.delay(robotDelay);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
			        robot.delay(robotDelay);
			        
			        //erase address bar and type in javascript command to scroll to next golfer
			        robot.keyPress(KeyEvent.VK_CONTROL);
			        robot.delay(robotDelay);
			        robot.keyPress(KeyEvent.VK_A);
			        robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_CONTROL);
					robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_A);
					robot.delay(robotDelay);
			        for(int j = 0; j < jsText.length(); j++){
				        rh.pressAndReleaseKey(jsTextAd2.substring(j,j+1));
			        }
			        
			        //wait for typing javascript
			        Thread.sleep(15000);
			        robot.keyPress(KeyEvent.VK_ENTER);
			        robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_ENTER);
					robot.delay(robotDelay);
					Thread.sleep(5000);
				}
				
				//if this was the last golfer before cut line, scroll past the cut line
		        if(curGolfer == numGolfersBeforeCut){
			        //move mouse to address bar
			        robot.mouseMove(addressBarX,addressBarY);
					robot.delay(robotDelay);
					robot.mousePress(InputEvent.BUTTON1_MASK);
			        robot.mouseRelease(InputEvent.BUTTON1_MASK);
			        robot.delay(robotDelay);
			        
			        //erase address bar and type in javascript command to scroll to next golfer
			        robot.keyPress(KeyEvent.VK_CONTROL);
			        robot.delay(robotDelay);
			        robot.keyPress(KeyEvent.VK_A);
			        robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_CONTROL);
					robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_A);
					robot.delay(robotDelay);
			        for(int j = 0; j < jsText.length(); j++){
				        rh.pressAndReleaseKey(jsTextCut.substring(j,j+1));
			        }
			        
			        //wait for typing javascript
			        Thread.sleep(15000);
			        robot.keyPress(KeyEvent.VK_ENTER);
			        robot.delay(robotDelay);
					robot.keyRelease(KeyEvent.VK_ENTER);
					robot.delay(robotDelay);
					Thread.sleep(5000);
				}
		        
		        curGolfer++;
	        }
		}catch(Exception e){
			System.out.println(e);
		}
	}
}
